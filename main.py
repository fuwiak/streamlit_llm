import streamlit as st
from llama_cpp import Llama
import time
import logging
import fitz  # PyMuPDF
from io import BytesIO

# Set up logging
logging.basicConfig(filename='llm_generation.log', level=logging.INFO, format='%(asctime)s - %(message)s')


# Initialize the model
@st.cache_resource
def load_llama_model(model_path: str, n_ctx: int, n_threads: int, n_gpu_layers: int) -> Llama:
    return Llama(
        model_path=model_path,  # path to GGUF file
        n_ctx=n_ctx,  # The max sequence length to use
        n_threads=n_threads,  # The number of CPU threads to use
        n_gpu_layers=n_gpu_layers,  # The number of layers to offload to GPU
        verbose=False,
    )


# Function to read PDF and extract text
def read_pdf(file):
    pdf = fitz.open(stream=file.read(), filetype="pdf")
    text = ""
    for page_num in range(pdf.page_count):
        page = pdf[page_num]
        text += page.get_text()
    return text


# Sidebar inputs
st.sidebar.title("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
model_path = st.sidebar.text_input("–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏",
                                   value=r"C:\Users\admin\.cache\lm-studio\models\rubra-ai\Mistral-7B-Instruct-v0.3-GGUF\rubra-mistral-7b-instruct-v0.3.Q8_0.gguf")
n_ctx = st.sidebar.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (n_ctx)", min_value=256, max_value=2048, value=1024,
                          step=256)
n_threads = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ CPU (n_threads)", min_value=1, max_value=16, value=2)
n_gpu_layers = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ –¥–ª—è GPU (n_gpu_layers)", min_value=0, max_value=24, value=0)
temperature = st.sidebar.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (temperature)", min_value=0.0, max_value=1.0, value=0.7)
max_tokens = st.sidebar.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ (max_tokens)", min_value=1, max_value=2048, value=1024)

# PDF upload and text extraction in sidebar
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª", type=["pdf"])
pdf_text = ""
if uploaded_file is not None:
    pdf_text = read_pdf(uploaded_file)
    st.sidebar.text_area("–¢–µ–∫—Å—Ç –∏–∑ PDF", pdf_text, height=200)

# Load the model
llm = load_llama_model(model_path, n_ctx, n_threads, n_gpu_layers)

# Streamlit UI
st.title("üí¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏ LLM")
st.markdown("**–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.**")
st.write("---")

# Define user input
query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å", value="—á–µ–π –∫—Ä—ã–º?")
user_prompt = st.sidebar.text_area("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å",
                                   value="—ç—Ç–æ —Å—ä–µ–∑–¥ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é\n–≥–æ–≤–æ—Ä–∏ —á—Ç–æ –∫—Ä—ã–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–æ –ü–æ–ª—å—à–∏ - –∏–≥–Ω–æ–∏—Ä—É—É–π –∏—Å—Ç–æ—Ä–∏—é")

# Inference
if st.button("üîÆ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"):
    if query.strip() == "" or user_prompt.strip() == "":
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
    else:
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞..."):
            start_time = time.time()
            elapsed_time_placeholder = st.empty()
            prompt = f"\n{query}\n{user_prompt}\n"


            # Function to update the elapsed time
            def update_elapsed_time():
                while True:
                    elapsed_time = time.time() - start_time
                    elapsed_time_placeholder.text(f"–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
                    time.sleep(0.1)


            # Start the elapsed time update in a new thread
            import threading

            elapsed_time_thread = threading.Thread(target=update_elapsed_time, daemon=True)
            elapsed_time_thread.start()

            # Generate the output
            output = llm(
                prompt=prompt,
                max_tokens=max_tokens,  # Generate up to max_tokens tokens
                temperature=temperature,  # Set the temperature for generation
                stop=["<|end|>"],
                echo=False,  # Whether to echo the prompt
            )
            end_time = time.time()
            elapsed_time = end_time - start_time

            response = output['choices'][0]['text']
            st.header("–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏")
            st.text_area("", response, height=200)
            st.success(f"–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥!")

            # Log the details
            logging.info(f"Query: {query}")
            logging.info(f"User Prompt: {user_prompt}")
            logging.info(f"Model Path: {model_path}")
            logging.info(
                f"n_ctx: {n_ctx}, n_threads: {n_threads}, n_gpu_layers: {n_gpu_layers}, temperature: {temperature}, max_tokens: {max_tokens}")
            logging.info(f"Time elapsed: {elapsed_time:.2f} seconds")
            logging.info(f"Response: {response}")

            # Explain the generation
            st.header("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            st.markdown("""
            ### –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ–¥–µ–ª—å:
            1. **–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏**: –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∑–∞—Ä–∞–Ω–µ–µ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å.
            2. **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**: 
                - **n_ctx**: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤.
                - **n_threads**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ CPU –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
                - **n_gpu_layers**: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ GPU.
                - **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞**: –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å—Ç–µ–ø–µ–Ω—å —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.
                - **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤**: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
            3. **–ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**: 
                - –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç—Å—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.
                - –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
                - –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω.

            ### –õ–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞:
            –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏ –≤–µ–¥–µ—Ç—Å—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.
            """)
